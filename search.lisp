(in-package :kindista)

(defvar *stop-words* (make-hash-table :size 750 :test 'equalp))

(defun add-stop-words (&rest words)
  (dolist (word words)
    (setf (gethash word *stop-words*) nil)))

(defun stop-word-p (word)
  (nth-value 1 (gethash word *stop-words*)))

(add-stop-words
  "a"
  "able"
  "about"
  "above"
  "abroad"
  "according"
  "accordingly"
  "across"
  "actually"
  "adj"
  "after"
  "afterwards"
  "again"
  "against"
  "ago"
  "ahead"
  "ain't"
  "all"
  "allow"
  "allows"
  "almost"
  "alone"
  "along"
  "alongside"
  "already"
  "also"
  "although"
  "always"
  "am"
  "amid"
  "amidst"
  "among"
  "amongst"
  "an"
  "and"
  "another"
  "any"
  "anybody"
  "anyhow"
  "anyone"
  "anything"
  "anyway"
  "anyways"
  "anywhere"
  "apart"
  "appear"
  "appreciate"
  "appropriate"
  "are"
  "aren't"
  "around"
  "as"
  "a's"
  "aside"
  "ask"
  "asking"
  "associated"
  "at"
  "available"
  "away"
  "awfully"
  "back"
  "backward"
  "backwards"
  "be"
  "became"
  "because"
  "become"
  "becomes"
  "becoming"
  "been"
  "before"
  "beforehand"
  "begin"
  "behind"
  "being"
  "believe"
  "below"
  "beside"
  "besides"
  "best"
  "better"
  "between"
  "beyond"
  "both"
  "brief"
  "but"
  "by"
  "came"
  "can"
  "cannot"
  "cant"
  "can't"
  "caption"
  "cause"
  "causes"
  "certain"
  "certainly"
  "changes"
  "clearly"
  "c'mon"
  "co"
  "co."
  "com"
  "come"
  "comes"
  "completely"
  "concerning"
  "consequently"
  "consider"
  "considering"
  "contain"
  "containing"
  "contains"
  "corresponding"
  "could"
  "couldn't"
  "course"
  "c's"
  "currently"
  "dare"
  "daren't"
  "decrease"
  "decreasingly"
  "definitely"
  "described"
  "despite"
  "did"
  "didn't"
  "different"
  "directly"
  "do"
  "does"
  "doesn't"
  "doing"
  "done"
  "don't"
  "down"
  "downwards"
  "during"
  "each"
  "eg"
  "eight"
  "eighty"
  "either"
  "else"
  "elsewhere"
  "end"
  "ending"
  "enough"
  "entirely"
  "especially"
  "et"
  "etc"
  "even"
  "ever"
  "evermore"
  "every"
  "everybody"
  "everyone"
  "everything"
  "everywhere"
  "ex"
  "exactly"
  "example"
  "except"
  "fairly"
  "far"
  "farther"
  "few"
  "fewer"
  "fifth"
  "first"
  "firstly"
  "five"
  "followed"
  "following"
  "follows"
  "for"
  "forever"
  "former"
  "formerly"
  "forth"
  "forward"
  "found"
  "four"
  "from"
  "further"
  "furthermore"
  "get"
  "gets"
  "getting"
  "given"
  "gives"
  "go"
  "goes"
  "going"
  "gone"
  "got"
  "gotten"
  "greetings"
  "had"
  "hadn't"
  "half"
  "happens"
  "hardly"
  "has"
  "hasn't"
  "have"
  "haven't"
  "having"
  "he"
  "he'd"
  "he'll"
  "hello"
  "help"
  "hence"
  "her"
  "here"
  "hereafter"
  "hereby"
  "herein"
  "here's"
  "hereupon"
  "hers"
  "herself"
  "he's"
  "hi"
  "him"
  "himself"
  "his"
  "hither"
  "hopefully"
  "how"
  "howbeit"
  "however"
  "hundred"
  "i"
  "i'd"
  "ie"
  "if"
  "ignored"
  "i'll"
  "i'm"
  "immediate"
  "in"
  "inasmuch"
  "inc"
  "increase"
  "increasingly"
  "indeed"
  "indicate"
  "indicated"
  "indicates"
  "inner"
  "inside"
  "insofar"
  "instead"
  "into"
  "inward"
  "is"
  "isn't"
  "it"
  "it'd"
  "it'll"
  "its"
  "it's"
  "itself"
  "i've"
  "just"
  "keep"
  "keeps"
  "kept"
  "know"
  "known"
  "knows"
  "last"
  "lastly"
  "lately"
  "later"
  "latter"
  "latterly"
  "least"
  "less"
  "lest"
  "let"
  "let's"
  "like"
  "liked"
  "likely"
  "likewise"
  "little"
  "look"
  "looking"
  "looks"
  "low"
  "lower"
  "ltd"
  "made"
  "main"
  "mainly"
  "make"
  "makes"
  "many"
  "may"
  "maybe"
  "mayn't"
  "me"
  "mean"
  "meantime"
  "meanwhile"
  "merely"
  "might"
  "mightn't"
  "mine"
  "minus"
  "miss"
  "more"
  "moreover"
  "most"
  "mostly"
  "mr"
  "mrs"
  "ms"
  "much"
  "must"
  "mustn't"
  "my"
  "myself"
  "name"
  "namely"
  "nd"
  "near"
  "nearly"
  "necessary"
  "need"
  "needn't"
  "needs"
  "neither"
  "never"
  "never"
  "neverless"
  "nevertheless"
  "new"
  "next"
  "nice"
  "nine"
  "ninety"
  "no"
  "nobody"
  "non"
  "none"
  "nonetheless"
  "noone"
  "no-one"
  "nor"
  "normally"
  "not"
  "nothing"
  "notwithstanding"
  "novel"
  "now"
  "nowhere"
  "obviously"
  "of"
  "off"
  "often"
  "oh"
  "ok"
  "okay"
  "old"
  "on"
  "once"
  "one"
  "ones"
  "one's"
  "only"
  "onto"
  "opposite"
  "or"
  "other"
  "others"
  "otherwise"
  "ought"
  "oughtn't"
  "our"
  "ours"
  "ourselves"
  "out"
  "outside"
  "over"
  "overall"
  "own"
  "particular"
  "particularly"
  "past"
  "per"
  "perfectly"
  "perhaps"
  "placed"
  "please"
  "plus"
  "possible"
  "presumably"
  "probably"
  "provided"
  "provides"
  "que"
  "quick"
  "quickly"
  "quite"
  "qv"
  "rather"
  "rd"
  "re"
  "really"
  "reasonably"
  "recent"
  "recently"
  "regarding"
  "regardless"
  "regards"
  "relatively"
  "respectively"
  "right"
  "round"
  "said"
  "same"
  "saw"
  "say"
  "saying"
  "says"
  "second"
  "secondly"
  "see"
  "seeing"
  "seem"
  "seemed"
  "seeming"
  "seems"
  "seen"
  "self"
  "selves"
  "sensible"
  "sent"
  "serious"
  "seriously"
  "seven"
  "several"
  "shall"
  "shan't"
  "she"
  "she'd"
  "she'll"
  "she's"
  "should"
  "shouldn't"
  "since"
  "six"
  "so"
  "some"
  "somebody"
  "someday"
  "somehow"
  "someone"
  "something"
  "sometime"
  "sometimes"
  "somewhat"
  "somewhere"
  "soon"
  "sorry"
  "specified"
  "specify"
  "specifying"
  "still"
  "sub"
  "such"
  "sup"
  "sure"
  "surely"
  "take"
  "taken"
  "taking"
  "tell"
  "tends"
  "th"
  "than"
  "thank"
  "thanks"
  "thanx"
  "that"
  "that'll"
  "thats"
  "that's"
  "that've"
  "the"
  "their"
  "theirs"
  "them"
  "themselves"
  "then"
  "thence"
  "there"
  "thereafter"
  "thereby"
  "there'd"
  "therefore"
  "therein"
  "there'll"
  "there're"
  "theres"
  "there's"
  "thereupon"
  "there've"
  "these"
  "they"
  "they'd"
  "they'll"
  "they're"
  "they've"
  "thing"
  "things"
  "think"
  "third"
  "thirty"
  "this"
  "thorough"
  "thoroughly"
  "those"
  "though"
  "thought"
  "thoughts"
  "three"
  "thrice"
  "through"
  "throughout"
  "thru"
  "thus"
  "thusly"
  "till"
  "to"
  "together"
  "too"
  "took"
  "toward"
  "towards"
  "tried"
  "tries"
  "truly"
  "try"
  "trying"
  "t's"
  "twice"
  "two"
  "un"
  "under"
  "underneath"
  "undoing"
  "unfortunately"
  "unless"
  "unlike"
  "unlikely"
  "until"
  "unto"
  "up"
  "upon"
  "upwards"
  "us"
  "use"
  "used"
  "useful"
  "uses"
  "using"
  "usually"
  "utterly"
  "value"
  "various"
  "versus"
  "very"
  "via"
  "viz"
  "vs"
  "want"
  "wants"
  "was"
  "wasn't"
  "way"
  "we"
  "we'd"
  "welcome"
  "well"
  "we'll"
  "went"
  "were"
  "we're"
  "weren't"
  "we've"
  "what"
  "whatever"
  "what'll"
  "what's"
  "what've"
  "when"
  "whence"
  "whenever"
  "where"
  "whereafter"
  "whereas"
  "whereby"
  "wherein"
  "where's"
  "whereupon"
  "wherever"
  "whether"
  "which"
  "whichever"
  "while"
  "whilst"
  "whither"
  "who"
  "who'd"
  "whoever"
  "whole"
  "wholly"
  "who'll"
  "whom"
  "whomever"
  "who's"
  "whose"
  "why"
  "will"
  "willing"
  "wish"
  "with"
  "within"
  "without"
  "wonder"
  "wondered"
  "wondering"
  "won't"
  "worst"
  "would"
  "wouldn't"
  "yes"
  "yet"
  "you"
  "you'd"
  "you'll"
  "your"
  "you're"
  "yours"
  "yourself"
  "yourselves"
  "you've"
  "zero")

(defparameter *nonword-scanner* (ppcre:create-scanner "[^'a-z ]"))
(defparameter *multispace-scanner* (ppcre:create-scanner " +"))

(defun stem-text (text)
  (let ((words (split " "
                      (ppcre:regex-replace-all *multispace-scanner*
                                               (ppcre:regex-replace-all *nonword-scanner*
                                                                        (string-downcase text)
                                                                        " ")
                                               " "))))
    (remove-duplicates (iter (for word in words)
                         (unless (stop-word-p word)
                           (collect (stem word))))
                       :test #'string=)))
  ; replace non-words with spaces
  ; split on spaces

(defun search-resources (type text &key (distance 10))
  ; get all requests within distance
  ; for each stem get matching requests
  ; return intersection
  
  (mapcar #'fourth
          (sort
            (intersection-fourth
              (iter (for stem in (stem-text text))
                    (reducing (gethash stem
                                       (case type
                                         ('offer *offer-stem-index*)
                                         (t *request-stem-index*)))
                              by #'intersection-fourth))
              (geo-index-query (case type
                                 ('offer *offer-geo-index*)
                                 (t *request-geo-index*))
                               (getf *user* :lat)
                               (getf *user* :long)
                               distance))
            #'> :key #'resource-rank)))

(defun search-site (text &key type (distance 10))

  )

(defroute "/search" ()
  (:get
    (require-user
      (standard-page
        "Search"
        (let ((requests (search-resources 'request (get-parameter "q")))
              (offers (search-resources 'offer (get-parameter "q")))
              (people (metaphone-index-query *metaphone-index* (get-parameter "q"))))
          (html
            (:h1 "search results")
            (:div :class "activity"
              (when requests
                (htm
                  (:h2 "requests")
                  (dolist (item requests)
                    (let ((request (db item)))
                      (htm
                        (str (request-activity-item :time (getf request :created)
                                                    :request-id item
                                                    :user-name (getf (db (getf request :by)) :name)
                                                    :user-id (username-or-id (getf request :by))
                                                    :hearts (length (loves item))
                                                    :text (getf request :text))))))))
              (when offers
                (htm
                  (:h2 "offers")
                  (:p (fmt "~a" offers))))
              (when people
                (htm
                  (:h2 "people")
                  (:p (fmt "~a" people)))))))
        :selected nil))))
  
